-- Dropping tables in case they exist
-- CASCADE CONSTRAINTS is used to drop all dependent objects, including all types of constraints

DROP TABLE FG_CUSTOMER_FAVOURITE_COURSE CASCADE CONSTRAINTS;

DROP TABLE FG_COURSE_INFORMATION CASCADE CONSTRAINTS;

DROP TABLE FG_TEE_TIME CASCADE CONSTRAINTS;

DROP TABLE FG_RESERVATION CASCADE CONSTRAINTS;

DROP TABLE FG_PROMOCODE CASCADE CONSTRAINTS;

DROP TABLE FG_CUSTOMER_REVIEW CASCADE CONSTRAINTS;

DROP TABLE FG_CUSTOMER CASCADE CONSTRAINTS;

DROP TABLE FG_CREDIT_CARD CASCADE CONSTRAINTS;

-- Create FG_CUSTOMER, and add consrtaint after using Alter table
-- This table stores customer information
CREATE TABLE FG_CUSTOMER (
    CUSTOMER_ID NUMBER,
    FIRST_NAME VARCHAR2(50) NOT NULL,
    LAST_NAME VARCHAR2(50) NOT NULL,
    GIFT_CARD_AMOUNT NUMBER(9, 2) NOT NULL,
    EMAIL VARCHAR2(50) NOT NULL
);

ALTER TABLE FG_CUSTOMER ADD CONSTRAINT SYS_FG_CUSTOMER_PK PRIMARY KEY (CUSTOMER_ID) ADD CONSTRAINT SYS_FG_CUSTOMER_GIFT_CARD_AMOUNT_CK CHECK (GIFT_CARD_AMOUNT >=0) ADD CONSTRAINT SYS_FG_CUSTOMER_EMAIL_CK CHECK(REGEXP_LIKE(EMAIL, '[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,3}$') );

-- Create FG_CREDIT_CARD, and add consrtaint after using Alter table
-- This table stores credit card information
CREATE TABLE FG_CREDIT_CARD (
    NAME_ON_CARD VARCHAR2(100) NOT NULL,
    IS_DEFAULT_CARD NUMBER(1) NOT NULL,
    CC_NUMBER NUMBER,
    CC_EXP_DATE DATE NOT NULL,
    CUSTOMER_ID NUMBER NOT NULL
);

ALTER TABLE FG_CREDIT_CARD ADD CONSTRAINT SYS_FG_CREDIT_CARD_PK PRIMARY KEY (CC_NUMBER) ADD CONSTRAINT SYS_FG_CREDIT_CARD_IS_DEFAULT_CARD_CK CHECK ((IS_DEFAULT_CARD) IN (0, 1)) ADD CONSTRAINT SYS_FG_CREDIT_CARD_CUSTOMER_ID_FK FOREIGN KEY (CUSTOMER_ID) REFERENCES FG_CUSTOMER (CUSTOMER_ID);

-- Create FC_COURSE_INFORMATION at column level
-- This table stores information about golf courses
CREATE TABLE FG_COURSE_INFORMATION (
    COURSE_NAME VARCHAR2(60) CONSTRAINT SYS_FG_COURSE_INFORMATION_PK PRIMARY KEY,
    CITY VARCHAR2(50) NOT NULL,
    COUNTRY CHAR(2) NOT NULL,
    PROVINCE CHAR(2),
    POSTAL_CODE NUMBER(6),
    AVERAGE_REVIEW_RATING NUMBER(2, 1) NOT NULL CONSTRAINT SYS_FG_COURSE_INFORMATION_AVERAGE_REVIEW_RATING_CK CHECK ( (1<AVERAGE_REVIEW_RATING) AND (AVERAGE_REVIEW_RATING<5) ),
    DESCRIPTION VARCHAR2(2000) NOT NULL,
    YEAR_BUILD DATE NOT NULL,
    LENGTH NUMBER NOT NULL CONSTRAINT SYS_FG_COURSE_INFORMATION_LENGTH_CK CHECK (LENGTH>0)
);

-- Create FG_TEE_TIME at column level
-- This table stores information about tee times for the golf courses
CREATE TABLE FG_TEE_TIME (
    TEE_TIME_NUM NUMBER CONSTRAINT SYS_FG_TEE_TIME_TEE_TIME_NUM_PK PRIMARY KEY,
    PRICE NUMBER(9, 2) NOT NULL CONSTRAINT SYS_FG_TEE_TIME_PRICE_CK CHECK (PRICE>=0),
    TEE_TIME DATE NOT NULL,
    IS_CART_INCLUDED CHAR(1) NOT NULL CONSTRAINT SYS_FG_TEE_TIME_IS_CART_INCLUDED_CK CHECK (UPPER (IS_CART_INCLUDED) IN ('Y', 'N')),
    NUM_OF_HOLES NUMBER NOT NULL CONSTRAINT SYS_FG_TEE_TIME_NUM_OF_HOLES_CK CHECK ((NUM_OF_HOLES) IN (9, 18)),
    AVAILABLE_SPACES NUMBER NOT NULL CONSTRAINT SYS_FG_TEE_TIME_AVAILABLE_SPACES_CK CHECK ( (0<AVAILABLE_SPACES) AND (AVAILABLE_SPACES<=4) ),
    COURSE_NAME VARCHAR2(60) NOT NULL CONSTRAINT SYS_FG_TEE_TIME_COURSE_NAME_FK REFERENCES FG_COURSE_INFORMATION(COURSE_NAME)
);

-- Create FG_RESERVATION at table level
-- This table stores reservation information
CREATE TABLE FG_RESERVATION (
    RESERVATION_NUM NUMBER,
    TOTAL_GREEN_FEES_PAID NUMBER(9, 2) NOT NULL,
    TAX_PAID NUMBER(9, 2) NOT NULL,
    AMOUNT_CHARGE_CC NUMBER(9, 2) NOT NULL,
    CC_NUMBER NUMBER NOT NULL,
    NUM_OF_PLAYERS NUMBER(1) NOT NULL,
    CUSTOMER_ID NUMBER NOT NULL,
    TEA_TIME_NUM NUMBER NOT NULL,
    CONSTRAINT SYS_FG_RESERVATION_PK PRIMARY KEY(RESERVATION_NUM),
    CONSTRAINT SYS_FG_RESERVATION_CC_NUMBER_FK FOREIGN KEY (CC_NUMBER) REFERENCES FG_CREDIT_CARD(CC_NUMBER),
    CONSTRAINT SYS_FG_RESERVATION_NUM_OF_PLAYERS_CK CHECK ((1<=NUM_OF_PLAYERS) AND (NUM_OF_PLAYERS<=4)),
    CONSTRAINT SYS_FG_RESERVATION_CUSTOMER_ID_FK FOREIGN KEY (CUSTOMER_ID) REFERENCES FG_CUSTOMER(CUSTOMER_ID),
    CONSTRAINT SYS_FG_RESERVATION_TEE_TIME_NUM FOREIGN KEY (TEA_TIME_NUM) REFERENCES FG_TEE_TIME(TEE_TIME_NUM)
);

-- Create FG_CUSTOMER_REIVEW at table level
-- This table stores customer reviews
CREATE TABLE FG_CUSTOMER_REVIEW (
    COURSE_NAME VARCHAR2(60) NOT NULL,
    RESERVATION_NUM NUMBER,
    STAR_RATING NUMBER(1) NOT NULL,
    REVIEW_TITLE VARCHAR2(50) NOT NULL,
    REVIEW_COMMENTS VARCHAR2(1000) NOT NULL,
    CONSTRAINT SYS_FG_CUSTOMER_REIVEW_PK PRIMARY KEY(RESERVATION_NUM),
    CONSTRAINT SYS_FG_CUSTOMER_REVIEW_COURSE_NAME_FK FOREIGN KEY (COURSE_NAME) REFERENCES FG_COURSE_INFORMATION (COURSE_NAME),
    CONSTRAINT SYS_FG_CUSTOMER_REVIEW_RESERVATION_NUM_FK FOREIGN KEY (RESERVATION_NUM) REFERENCES FG_RESERVATION(RESERVATION_NUM),
    CONSTRAINT SYS_FG_CUSTOMER_REVIEW_STAR_RATING_CK CHECK ( (1<=STAR_RATING) AND (STAR_RATING<=5))
);

-- Create FG_PROMOCODE at table level
-- This table stores promo code information
CREATE TABLE FG_PROMOCODE (
    CUSTOMER_ID NUMBER,
    PROMO_CODE VARCHAR2(18),
    ISSUED_DATE DATE NOT NULL,
    VALUE_OF_PROMO_CODE NUMBER(4, 2) NOT NULL,
    IS_USED NUMBER(1),
    PC_EXP_DATE DATE NOT NULL,
    RESERVATION_NUM NUMBER,
    CONSTRAINT SYS_FG_PROMOCODE_PK PRIMARY KEY (PROMO_CODE),
    CONSTRAINT SYS_FG_PROMOCODE_CUSTOMER_ID_FK FOREIGN KEY (CUSTOMER_ID) REFERENCES FG_CUSTOMER(CUSTOMER_ID),
    CONSTRAINT SYS_FG_PROMOCODE_ISSUED_DATE_CK CHECK (PC_EXP_DATE > ISSUED_DATE),
    CONSTRAINT SYS_FG_PROMOCODE_IS_USED_CK CHECK ( (IS_USED) IN (0, 1)),
    CONSTRAINT SYS_FG_PROMOCODE_PC_EXP_DATE_CK CHECK (PC_EXP_DATE > ISSUED_DATE),
    CONSTRAINT SYS_FG_PROMOCODE_RESERVATION_NUM_FK FOREIGN KEY (RESERVATION_NUM) REFERENCES FG_RESERVATION(RESERVATION_NUM)
);

-- Create FG_CUSTOMER_FAVOURITE_COURSE at table level
-- This table stores information about the customer's favorite courses
CREATE TABLE FG_CUSTOMER_FAVOURITE_COURSE (
    COURSE_NAME VARCHAR2(60),
    CUSTOMER_ID NUMBER,
    CONSTRAINT SYS_FG_CUSTOMER_FAVOURITE_COURSE_PK_COURSE_NAME_FK FOREIGN KEY (COURSE_NAME) REFERENCES FG_COURSE_INFORMATION (COURSE_NAME),
    PRIMARY KEY (CUSTOMER_ID, COURSE_NAME),
    CONSTRAINT SYS_FG_CUSTOMER_FAVOURITE_COURSE_PK_CUSTOMER_ID_FK FOREIGN KEY (CUSTOMER_ID) REFERENCES FG_CUSTOMER (CUSTOMER_ID)
);

COMMIT;